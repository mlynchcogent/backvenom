#!/usr/bin/env python3

from datetime import datetime
from venomsrc.config import Config
from venomsrc.crypto import Crypto


class Utils:
    def __init__(self):
        self.CONFIG = Config()  # config file vars
        self.crypto = Crypto()
        # DEBUG type  message print
        self.INFO = 0
        self.WARNING = 1
        self.OK = 2
        self.ERROR = 3

    def log(self, mode: int, toprint: str, log: bool) -> None:
        """
            if CONFIG DEBUG is True, print message.
            if log is True (arg log), save to logging path
            @param mode: message type
            @param toprint: message to print
            @param log: log to file ?
            @return: None
        """
        message = str(datetime.now())
        if mode == 0:
            save_log = message + " [INFO] " + toprint
            message += " [\033[96mINFO\033[0m] " + toprint
        elif mode == 1:
            save_log = message + " [WARNING] " + toprint
            message += " [\033[93mWARNING\033[0m] " + toprint
        elif mode == 2:
            save_log = message + " [OK] " + toprint
            message += " [\033[92mOK\033[0m] " + toprint
        else:
            save_log = message + " [INFO] " + toprint
            message += " [\033[91mERROR\033[0m] " + toprint

        message += '\n'
        save_log += '\n'

        if (self.CONFIG.DEBUG):
            print(message, end='')

        if log:
            with open(self.CONFIG.LOGGING_PATH, "a+") as f:
                f.writelines(save_log)

    def ssend(self, s: object, string: str, password="") -> None:
        """
        Socket secure AES send
        @param s: socket object
        @param password: password generated by server
        @param string: string to send
        @return: None
        """
        if not password:
            password = self.CONFIG.password

        try:
            s.send(self.crypto.aes_encrypt(string, password))
        except Exception as e:
            print(e)
            self.log(self.ERROR, "Error sending data", 1)

    def srecv(self, s: object, password="") -> str:
        """
        Socket secure AES recv
        @param s: socket object
        @param password: password generated by server
        @return: plain text string
        """
        if not password:
            password = self.CONFIG.password

        try:
            return self.crypto.aes_decrypt(s.recv(self.CONFIG.RCV_BLOCK_SZ), password)
        except:
            self.log(self.ERROR, "Error receiving data", 1)
