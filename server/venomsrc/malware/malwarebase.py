#!/usr/bin/env python3

from abc import ABC, abstractmethod

"""
Cuando se envíe un comando, guardar la respuesta en elasticsearch, si se envia desde una botnet, solo ver desde ahi y mandarlos a saco ( de manera asíncrona ? )
"""

"""
a cada bot se le asignará un ID; con el se puede acceder directamente mediante venomsrc.globals.agents[id].smth()
"""
class MalwareHandler(ABC):
    """
    Handle a client connection given socket writer/reader
    """
    def __init__(self, writer, reader):
        self.writer = writer
        self.reader = reader
        # indexar en la bbdd si son correctos los datos
        # sino no instanciar

    @abstractmethod
    def isValid(self):
        pass

class MalwareGenerator(ABC):
    """
    This class generate malware and returns binary w/ given options
    return "ERROR: (error)" when missing options or wathever. if response.startswith("ERROR: ") print
    """
    def __init__(self, data: dict):
        self.listener = data["listener"]
        self.info = data["info"]
        self.platforms = data["platforms"]
        self.requirements = data["requirements"]

    @abstractmethod
    def generate(self) -> bytes:
        """
        Return: malware in byte form ( binary )
        """